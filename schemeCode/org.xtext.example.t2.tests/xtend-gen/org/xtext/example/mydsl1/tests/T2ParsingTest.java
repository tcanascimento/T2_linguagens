/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl1.tests;

import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.xtext.example.mydsl1.t2.Model;
import org.xtext.example.mydsl1.tests.T2InjectorProvider;

@RunWith(XtextRunner.class)
@InjectWith(T2InjectorProvider.class)
@SuppressWarnings("all")
public class T2ParsingTest {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Test
  public void validaCondicionalIf() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(print \"if < 1 10 \'ok\' \'nok\'\")");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void validaCondicionalIfElse() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(print \"(if (> 1 10) \'ok\' \'nok\')\")");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void validaPrefixoCompostot() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(print \"Hello, \" (read) \"!\")");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void validaPrefixoPrint() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("print \'oi\'");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void validaPrefixoPrint2() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(print \"What\'s your name?\")");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void validaNumeroSozinho() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("10");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void validaExpressaoSemParentesesComposta() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("+10(* 11 20)");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void validaExpressaoSemParenteses() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("* 11 20)");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      Assert.assertFalse(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void validaOperacaoSemParenteses() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("* 11 20 129 12 19");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void validaExpressaoSoma() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(+ 10 20)");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void validaExpressaoSubtracao() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(- 99 10)");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void validaExpressaoMultiplicacao() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(* 11 10)");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void validaExpressaoDivisao() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(/ 10 20)");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void validaExpressaoMenorQue() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(< 10 20)");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void validaExpressaoMenorIgualQue() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(<= 10 20)");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void validaExpressaoMaiorQue() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(> 10 20)");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void validaExpressaoMaiorIgualQue() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(>= 10 20)");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void validaDefinicao() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(define a 10)");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void validaDefinicaoComposta() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(define a (+ a 50))");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      Assert.assertTrue(result.eResource().getErrors().isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
