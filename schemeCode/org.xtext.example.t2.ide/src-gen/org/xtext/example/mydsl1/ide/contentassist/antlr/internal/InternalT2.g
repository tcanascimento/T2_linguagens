/*
 * generated by Xtext 2.12.0
 */
grammar InternalT2;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl1.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl1.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl1.services.T2GrammarAccess;

}
@parser::members {
	private T2GrammarAccess grammarAccess;

	public void setGrammarAccess(T2GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getVarsAssignment()); }
		(rule__Model__VarsAssignment)*
		{ after(grammarAccess.getModelAccess().getVarsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOp
entryRuleOp
:
{ before(grammarAccess.getOpRule()); }
	 ruleOp
{ after(grammarAccess.getOpRule()); } 
	 EOF 
;

// Rule Op
ruleOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOpAccess().getAlternatives()); }
		(rule__Op__Alternatives)
		{ after(grammarAccess.getOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefine
entryRuleDefine
:
{ before(grammarAccess.getDefineRule()); }
	 ruleDefine
{ after(grammarAccess.getDefineRule()); } 
	 EOF 
;

// Rule Define
ruleDefine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefineAccess().getGroup()); }
		(rule__Define__Group__0)
		{ after(grammarAccess.getDefineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComplemento
entryRuleComplemento
:
{ before(grammarAccess.getComplementoRule()); }
	 ruleComplemento
{ after(grammarAccess.getComplementoRule()); } 
	 EOF 
;

// Rule Complemento
ruleComplemento 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComplementoAccess().getAlternatives()); }
		(rule__Complemento__Alternatives)
		{ after(grammarAccess.getComplementoAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getAlternatives()); }
		(rule__Value__Alternatives)
		{ after(grammarAccess.getValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVAR
entryRuleVAR
:
{ before(grammarAccess.getVARRule()); }
	 ruleVAR
{ after(grammarAccess.getVARRule()); } 
	 EOF 
;

// Rule VAR
ruleVAR 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVARAccess().getValueParserRuleCall()); }
		ruleValue
		{ after(grammarAccess.getVARAccess().getValueParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Op__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOpAccess().getHyphenMinusKeyword_0()); }
		'-'
		{ after(grammarAccess.getOpAccess().getHyphenMinusKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getOpAccess().getPlusSignKeyword_1()); }
		'+'
		{ after(grammarAccess.getOpAccess().getPlusSignKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getOpAccess().getSolidusKeyword_2()); }
		'/'
		{ after(grammarAccess.getOpAccess().getSolidusKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getOpAccess().getAsteriskKeyword_3()); }
		'*'
		{ after(grammarAccess.getOpAccess().getAsteriskKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getOpAccess().getLessThanSignKeyword_4()); }
		'<'
		{ after(grammarAccess.getOpAccess().getLessThanSignKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getOpAccess().getGreaterThanSignKeyword_5()); }
		'>'
		{ after(grammarAccess.getOpAccess().getGreaterThanSignKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getOpAccess().getGreaterThanSignEqualsSignKeyword_6()); }
		'>='
		{ after(grammarAccess.getOpAccess().getGreaterThanSignEqualsSignKeyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getOpAccess().getLessThanSignEqualsSignKeyword_7()); }
		'<='
		{ after(grammarAccess.getOpAccess().getLessThanSignEqualsSignKeyword_7()); }
	)
	|
	(
		{ before(grammarAccess.getOpAccess().getEqualsSignKeyword_8()); }
		'='
		{ after(grammarAccess.getOpAccess().getEqualsSignKeyword_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Complemento__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComplementoAccess().getINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getComplementoAccess().getINTTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getComplementoAccess().getGroup_1()); }
		(rule__Complemento__Group_1__0)
		{ after(grammarAccess.getComplementoAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getComplementoAccess().getGroup_2()); }
		(rule__Complemento__Group_2__0)
		{ after(grammarAccess.getComplementoAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getDefineParserRuleCall_0()); }
		ruleDefine
		{ after(grammarAccess.getValueAccess().getDefineParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getComplementoParserRuleCall_1()); }
		ruleComplemento
		{ after(grammarAccess.getValueAccess().getComplementoParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getGroup_2()); }
		(rule__Value__Group_2__0)
		{ after(grammarAccess.getValueAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__0__Impl
	rule__Define__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getDefineAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__1__Impl
	rule__Define__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getDefineKeyword_1()); }
	'define'
	{ after(grammarAccess.getDefineAccess().getDefineKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__2__Impl
	rule__Define__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getIDTerminalRuleCall_2()); }
	RULE_ID
	{ after(grammarAccess.getDefineAccess().getIDTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__3__Impl
	rule__Define__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getComplementoParserRuleCall_3()); }
	ruleComplemento
	{ after(grammarAccess.getDefineAccess().getComplementoParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Define__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Define__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefineAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getDefineAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Complemento__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Complemento__Group_1__0__Impl
	rule__Complemento__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Complemento__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplementoAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getComplementoAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Complemento__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Complemento__Group_1__1__Impl
	rule__Complemento__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Complemento__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplementoAccess().getOpParserRuleCall_1_1()); }
	ruleOp
	{ after(grammarAccess.getComplementoAccess().getOpParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Complemento__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Complemento__Group_1__2__Impl
	rule__Complemento__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Complemento__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplementoAccess().getINTTerminalRuleCall_1_2()); }
	(RULE_INT)*
	{ after(grammarAccess.getComplementoAccess().getINTTerminalRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Complemento__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Complemento__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Complemento__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplementoAccess().getRightParenthesisKeyword_1_3()); }
	')'
	{ after(grammarAccess.getComplementoAccess().getRightParenthesisKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Complemento__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Complemento__Group_2__0__Impl
	rule__Complemento__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Complemento__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplementoAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getComplementoAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Complemento__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Complemento__Group_2__1__Impl
	rule__Complemento__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Complemento__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplementoAccess().getOpParserRuleCall_2_1()); }
	ruleOp
	{ after(grammarAccess.getComplementoAccess().getOpParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Complemento__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Complemento__Group_2__2__Impl
	rule__Complemento__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Complemento__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplementoAccess().getIDTerminalRuleCall_2_2()); }
	RULE_ID
	{ after(grammarAccess.getComplementoAccess().getIDTerminalRuleCall_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Complemento__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Complemento__Group_2__3__Impl
	rule__Complemento__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Complemento__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplementoAccess().getINTTerminalRuleCall_2_3()); }
	RULE_INT
	{ after(grammarAccess.getComplementoAccess().getINTTerminalRuleCall_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Complemento__Group_2__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Complemento__Group_2__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Complemento__Group_2__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplementoAccess().getRightParenthesisKeyword_2_4()); }
	')'
	{ after(grammarAccess.getComplementoAccess().getRightParenthesisKeyword_2_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Value__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value__Group_2__0__Impl
	rule__Value__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueAccess().getOpParserRuleCall_2_0()); }
	ruleOp
	{ after(grammarAccess.getValueAccess().getOpParserRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueAccess().getComplementoParserRuleCall_2_1()); }
	ruleComplemento
	{ after(grammarAccess.getValueAccess().getComplementoParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__VarsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getVarsVARParserRuleCall_0()); }
		ruleVAR
		{ after(grammarAccess.getModelAccess().getVarsVARParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
