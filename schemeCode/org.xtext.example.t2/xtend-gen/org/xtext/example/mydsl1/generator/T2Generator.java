/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl1.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.mydsl1.t2.Value;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class T2Generator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    fsa.generateFile("T3_Linguagens.java", this.start(resource));
  }
  
  public CharSequence start(final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class T3_Linguagens {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String [] args){");
    _builder.newLine();
    {
      Iterable<Value> _filter = Iterables.<Value>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Value.class);
      for(final Value e : _filter) {
        {
          String _comp = e.getComp();
          boolean _notEquals = (!Objects.equal(_comp, null));
          if (_notEquals) {
            _builder.append("\t");
            _builder.append("System.out.pritnln(");
            String _comp_1 = e.getComp();
            _builder.append(_comp_1, "\t");
            _builder.append(")");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
