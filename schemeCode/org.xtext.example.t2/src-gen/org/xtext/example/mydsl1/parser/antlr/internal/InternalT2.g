/*
 * generated by Xtext 2.12.0
 */
grammar InternalT2;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl1.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl1.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl1.services.T2GrammarAccess;

}

@parser::members {

 	private T2GrammarAccess grammarAccess;

    public InternalT2Parser(TokenStream input, T2GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected T2GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getVarsVARParserRuleCall_0());
			}
			lv_vars_0_0=ruleVAR
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"vars",
					lv_vars_0_0,
					"org.xtext.example.mydsl1.T2.VAR");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleOp
entryRuleOp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOpRule()); }
	iv_ruleOp=ruleOp
	{ $current=$iv_ruleOp.current.getText(); }
	EOF;

// Rule Op
ruleOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpAccess().getHyphenMinusKeyword_0());
		}
		    |
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpAccess().getPlusSignKeyword_1());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpAccess().getSolidusKeyword_2());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpAccess().getAsteriskKeyword_3());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpAccess().getLessThanSignKeyword_4());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpAccess().getGreaterThanSignKeyword_5());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpAccess().getGreaterThanSignEqualsSignKeyword_6());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpAccess().getLessThanSignEqualsSignKeyword_7());
		}
		    |
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOpAccess().getEqualsSignKeyword_8());
		}
	)
;

// Entry rule entryRulePrefix
entryRulePrefix returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrefixRule()); }
	iv_rulePrefix=rulePrefix
	{ $current=$iv_rulePrefix.current.getText(); }
	EOF;

// Rule Prefix
rulePrefix returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='define'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPrefixAccess().getDefineKeyword_0());
		}
		    |
		kw='set!'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPrefixAccess().getSetKeyword_1());
		}
		    |
		kw='display'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPrefixAccess().getDisplayKeyword_2());
		}
		    |
		kw='print'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPrefixAccess().getPrintKeyword_3());
		}
		    |
		kw='lambda'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPrefixAccess().getLambdaKeyword_4());
		}
		    |
		kw='define-macro'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPrefixAccess().getDefineMacroKeyword_5());
		}
		    |
		kw='read'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPrefixAccess().getReadKeyword_6());
		}
	)
;

// Entry rule entryRuleCompose
entryRuleCompose returns [String current=null]:
	{ newCompositeNode(grammarAccess.getComposeRule()); }
	iv_ruleCompose=ruleCompose
	{ $current=$iv_ruleCompose.current.getText(); }
	EOF;

// Rule Compose
ruleCompose returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComposeAccess().getPrefixParserRuleCall_0());
		}
		this_Prefix_0=rulePrefix
		{
			$current.merge(this_Prefix_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComposeAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getComposeAccess().getPrefixParserRuleCall_1_1());
			}
			this_Prefix_2=rulePrefix
			{
				$current.merge(this_Prefix_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComposeAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleDefine
entryRuleDefine returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDefineRule()); }
	iv_ruleDefine=ruleDefine
	{ $current=$iv_ruleDefine.current.getText(); }
	EOF;

// Rule Define
ruleDefine returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefineAccess().getLeftParenthesisKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getDefineAccess().getPrefixParserRuleCall_1());
		}
		this_Prefix_1=rulePrefix
		{
			$current.merge(this_Prefix_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		this_ID_2=RULE_ID
		{
			$current.merge(this_ID_2);
		}
		{
			newLeafNode(this_ID_2, grammarAccess.getDefineAccess().getIDTerminalRuleCall_2());
		}
		{
			newCompositeNode(grammarAccess.getDefineAccess().getComplementoParserRuleCall_3());
		}
		this_Complemento_3=ruleComplemento
		{
			$current.merge(this_Complemento_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDefineAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleComplemento
entryRuleComplemento returns [String current=null]:
	{ newCompositeNode(grammarAccess.getComplementoRule()); }
	iv_ruleComplemento=ruleComplemento
	{ $current=$iv_ruleComplemento.current.getText(); }
	EOF;

// Rule Complemento
ruleComplemento returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getComplementoAccess().getINTTerminalRuleCall_0());
		}
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComplementoAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getComplementoAccess().getOpParserRuleCall_1_1());
			}
			this_Op_2=ruleOp
			{
				$current.merge(this_Op_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				this_INT_3=RULE_INT
				{
					$current.merge(this_INT_3);
				}
				{
					newLeafNode(this_INT_3, grammarAccess.getComplementoAccess().getINTTerminalRuleCall_1_2());
				}
			)*
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComplementoAccess().getRightParenthesisKeyword_1_3());
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComplementoAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getComplementoAccess().getOpParserRuleCall_2_1());
			}
			this_Op_6=ruleOp
			{
				$current.merge(this_Op_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_ID_7=RULE_ID
			{
				$current.merge(this_ID_7);
			}
			{
				newLeafNode(this_ID_7, grammarAccess.getComplementoAccess().getIDTerminalRuleCall_2_2());
			}
			this_INT_8=RULE_INT
			{
				$current.merge(this_INT_8);
			}
			{
				newLeafNode(this_INT_8, grammarAccess.getComplementoAccess().getINTTerminalRuleCall_2_3());
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComplementoAccess().getRightParenthesisKeyword_2_4());
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComplementoAccess().getLeftParenthesisKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getComplementoAccess().getPrefixParserRuleCall_3_1());
			}
			this_Prefix_11=rulePrefix
			{
				$current.merge(this_Prefix_11);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_STRING_12=RULE_STRING
			{
				$current.merge(this_STRING_12);
			}
			{
				newLeafNode(this_STRING_12, grammarAccess.getComplementoAccess().getSTRINGTerminalRuleCall_3_2());
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComplementoAccess().getRightParenthesisKeyword_3_3());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getComplementoAccess().getPrefixParserRuleCall_4_0());
			}
			this_Prefix_14=rulePrefix
			{
				$current.merge(this_Prefix_14);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_STRING_15=RULE_STRING
			{
				$current.merge(this_STRING_15);
			}
			{
				newLeafNode(this_STRING_15, grammarAccess.getComplementoAccess().getSTRINGTerminalRuleCall_4_1());
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComplementoAccess().getLeftParenthesisKeyword_5_0());
			}
			{
				newCompositeNode(grammarAccess.getComplementoAccess().getPrefixParserRuleCall_5_1());
			}
			this_Prefix_17=rulePrefix
			{
				$current.merge(this_Prefix_17);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_STRING_18=RULE_STRING
			{
				$current.merge(this_STRING_18);
			}
			{
				newLeafNode(this_STRING_18, grammarAccess.getComplementoAccess().getSTRINGTerminalRuleCall_5_2());
			}
			{
				newCompositeNode(grammarAccess.getComplementoAccess().getComposeParserRuleCall_5_3());
			}
			this_Compose_19=ruleCompose
			{
				$current.merge(this_Compose_19);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_STRING_20=RULE_STRING
			{
				$current.merge(this_STRING_20);
			}
			{
				newLeafNode(this_STRING_20, grammarAccess.getComplementoAccess().getSTRINGTerminalRuleCall_5_4());
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getComplementoAccess().getRightParenthesisKeyword_5_5());
			}
		)
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current.getText(); }
	EOF;

// Rule Value
ruleValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getValueAccess().getDefineParserRuleCall_0());
		}
		this_Define_0=ruleDefine
		{
			$current.merge(this_Define_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getComplementoParserRuleCall_1());
		}
		this_Complemento_1=ruleComplemento
		{
			$current.merge(this_Complemento_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getValueAccess().getOpParserRuleCall_2_0());
			}
			this_Op_2=ruleOp
			{
				$current.merge(this_Op_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getValueAccess().getComplementoParserRuleCall_2_1());
			}
			this_Complemento_3=ruleComplemento
			{
				$current.merge(this_Complemento_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleVAR
entryRuleVAR returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVARRule()); }
	iv_ruleVAR=ruleVAR
	{ $current=$iv_ruleVAR.current.getText(); }
	EOF;

// Rule VAR
ruleVAR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getVARAccess().getValueParserRuleCall());
	}
	this_Value_0=ruleValue
	{
		$current.merge(this_Value_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
